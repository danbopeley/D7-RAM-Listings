<?php
/**
 * This module provides functionality to create a custom node type (ramlisting) and
 * import MLS data from RAM MLS service into ramlisting nodes
 * 
 * @author Daniel Bopeley <dan@bluetent.com.com>
 */

define( "RAMLISTING_MODULE_PATH", drupal_get_path('module', 'ramlisting') );
define( "RAMLISTING_CONFIG_PATH", RAMLISTING_MODULE_PATH .'/config' );


/**
 * Implements hook_permission().
 */
function ramlisting_permission() {
  return array(
    'administer ramlisting' => array(
      'title' => t('Administer RAM MLS Properties'),
    ),
    'create ramlisting' => array(
      'title' => t('Create RAM MLS Properties'),
    ),
    'view ramlisting' => array(
      'title' => t('View RAM MLS Properties'),
    ),
    'update ramlisting' => array(
      'title' => t('Update RAM MLS Properties'),
    ),
    'delete ramlisting' => array(
      'title' => t('Delete RAM MLS Properties'),
    ),
  );
}


/**
 * Implements hook_filter_default_formats().
 */
function ramlisting_filter_default_formats() {
  $formats = array();

  // Exported format: Plain text
  $formats['plain_text'] = array(
    'format' => 'plain_text',
    'name' => 'Plain text',
    'cache' => '1',
    'status' => '1',
    'weight' => '10',
    'filters' => array(
      'filter_html_escape' => array(
        'weight' => '0',
        'status' => '1',
        'settings' => array(),
      ),
      'filter_url' => array(
        'weight' => '1',
        'status' => '1',
        'settings' => array(
          'filter_url_length' => 72,
        ),
      ),
      'filter_autop' => array(
        'weight' => '2',
        'status' => '1',
        'settings' => array(),
      ),
    ),
  );

  return $formats;
}


/**
 * Implements admin_paths().
 */
function ramlisting_admin_paths() {
    $paths = array(
      'admin/config/content/ramlisting/update' => TRUE, 
    );
    return $paths;
}


/**
 * Implements hook_menu().
 */
function ramlisting_menu() {

	$items['admin/config/content/ramlisting'] = array(
    'title' => 'RAM MLS settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ramlisting_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer ramlisting'),
    'description' => 'Configure RAM MLS settings.',
    'file' => 'ramlisting.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  

	$items['admin/config/content/ramlisting/configure'] = array(
	  'title' => 'RAM Listings Configuration',
	  'type' => MENU_DEFAULT_LOCAL_TASK,
	  'weight' => 10,
	);
	$configed = variable_get('ramlisting_config_file', NULL);variable_get('ramlisting_image_base', null );
	if($configed){
	$items['admin/config/content/ramlisting/tools'] = array(
    'title' => 'RAM Listing Tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ramlisting_admin_tools'),
    'access callback' => 'user_access',
    'access arguments' => array('administer ramlisting'),
    'description' => 'RAM Listing Tools.',
    'file' => 'ramlisting.tools.inc',
    'type' => MENU_LOCAL_TASK,
		'weight' => 20,
  );
	}
	
  $items['admin/config/content/ramlisting/update'] = array(
    'title' => 'Update Listings',
    'page callback' => 'ramlisting_execute_update',
    'access arguments' => array('administer ramlisting'),
    'type' =>  MENU_CALLBACK,
  );
  
  
   $items['admin/config/content/ramlisting/purge'] = array(
    'title' => 'Purge Listings',
    'page callback' => 'ramlisting_purge_all',
    'access arguments' => array('administer ramlisting'),
    'type' =>  MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implement hook_cron().
 */
function ramlisting_cron() {
	$is_cron = true;
	//ramlisting_execute_update($is_cron);

}

/**
 * triggers importing RAM MLS data.
 *
 * @param $is_cron
 *   Optional. flag to tell if process was initiated manually or by cron.
 * 
 */
function ramlisting_execute_update($is_cron = false)
{
	
	$domain = $_SERVER['SERVER_NAME'];
	$ip = $_SERVER['SERVER_ADDR'];

	include_once(RAMLISTING_MODULE_PATH. '/class.ram.php' );
	
	/*
	* build request (used below $ram->getLastMls) to find last MLS number in MLS area
	*/
	$getlastmls = array();
	$getlastmls['input'] = "<?xml version='1.0' encoding='UTF-8' ?>
							<rss version='2.0'>
								<search>
									<website>gf.btmsites.net</website>
									<ipaddress>74.205.71.253</ipaddress>
									<offset>0</offset>
									<numresults>1</numresults>
									<orderby>Mls_Num DESC</orderby>
								</search>
							</rss>";
	
	
	
	$offset = variable_get('ramlisting_update_offset', 0 );
	$per_page = variable_get('ramlisting_update_perpage', 10 );
	//$broker_id = variable_get('ramlisting_broker_id', '20090111180244872857000000' );
	$order_by = variable_get( 'ramlisting_default_sort_field', 'Mls_Num ASC' );
		$postdata = array();
		$postdata['input'] = "<?xml version='1.0' encoding='UTF-8' ?>
							<rss version='2.0'>
								<search>
									<website>gf.btmsites.net</website>
									<ipaddress>74.205.71.253</ipaddress>
									<offset>$offset</offset>
									<numresults>$per_page</numresults>
									<orderby>$order_by</orderby>
								</search>
							</rss>";
		

	$mls_connection_string = variable_get('ramlisting_connection_string', 'http://aspen.interactiveproperties.com/aspenAPI.php' );
	$mls_image_base = variable_get('ramlisting_image_base', null );
	$mls_region_id = variable_get('ramlisting_region_id', 'aspen' );
	
	// instantiate new Ram 
	$ram = new Ram( $mls_connection_string, $mls_image_base, $mls_region_id );
	
	/*
	* find last MLS number in entire list of properties
	* by performing a search returning a single property
	* which is the last property in entire list because we order by MLS numbe DESC
	* this MLS number is used to flag the update/cron process to reset the offset 
	* back to 0 once we have reached the end of MLSs in entire list
	*/
	$lastmls = $ram->getLastMls( $getlastmls );
	$last_mlsnum = key($lastmls); //this is the last MLS number
	
	// request and return mls listings from postdata configured above
	$listings = $ram->getUpdateResults( $postdata );
	
	//I think I can kill this
	$update_count = count($listings);
	
	//loop listings returned form RAM 
	foreach ($listings as $mlsnum => $listing) {
		
		//quick check to see if a ramlisting node already exists with the listings MLS num as node title
		$row = db_query('SELECT nid FROM node WHERE title = :mlsnum', array(':mlsnum' => $mlsnum))->fetchField();
		
		
		if(!isset($row['nid'])) {
		//no existing ramlisting node with mls number as title SO do insert

				$createdlisting = ramlisting_create_new_listing($listing);

		} else {
		//we found an existing ramlisting node SO do update
				
				$nid = $row['nid'];
				//$updatedlisting = ramlisting_update_listing($listing, $nid);
		}
		//log mls number of last property imported or updated
		$lastupdated_mlsnum = $listing['title'];

	}
	
	//compare MLS Number ($last_mlsnum) of last listing MLS area to MLS number of last property updated ($lastupdated_mlsnum)
	if($last_mlsnum == $lastupdated_mlsnum){
		
		/*
		they match so we are at the end of the MLS listings, 
		hence reset offset back to 0 to start next update from the beginning
		*/
		variable_set('ramlisting_update_offset', 0 );
		
	}else{
		
		/*
		still not at the end so increment offset by import threshold ($per_page)
		*/
		$curoffset = variable_get('ramlisting_update_offset', 0 );
		
		$newoffset = $curoffset + $per_page;
		
		variable_set('ramlisting_update_offset', $newoffset );
		
	}
	
	//can probably kill this since we look for last mlsnumber on update above
	variable_set('ramlisting_last_updated_mlsnum', $lastupdated_mlsnum);
	
	// if this was a manual update the redirect back to ramlisting tool page
	if(!$is_cron){
		$options = array('fragment' => 'overlay=admin/config/content/ramlisting/tools');
		drupal_goto('admin/config/content/ramlisting/tools', $options);
	}
	
}



/**
 * triggers importing RAM MLS data.
 *
 * @param $mlsnum
 * 
 */
function ramlisting_execute_listing_update($mlsnum)
{
	
	$domain = $_SERVER['SERVER_NAME'];
	$ip = $_SERVER['SERVER_ADDR'];

	include_once(RAMLISTING_MODULE_PATH. '/class.ram.php' );
	
	$postdata = array();
	$postdata['input'] = "<?xml version='1.0' encoding='UTF-8' ?>
						<rss version='2.0'>
							<search>
								<website>www.garyfeldman.com</website>
								<ipaddress>74.205.71.254</ipaddress>
								<key1>$mlsnum</key1>
							</search>
						</rss>";
		

	$mls_connection_string = variable_get('ramlisting_connection_string', 'http://aspen.interactiveproperties.com/aspenAPI.php' );
	$mls_image_base = variable_get('ramlisting_image_base', null );
	$mls_region_id = variable_get('ramlisting_region_id', 'aspen' );
	
	// instantiate new Ram 
	$ram = new Ram( $mls_connection_string, $mls_image_base, $mls_region_id );
	
	// request and return mls listings from postdata configured above
	$listings = $ram->getUpdateResults($postdata);

	
	if(count($listings) == 0){
		drupal_set_message(t("It appears !mn is not a valid MLS number. Please enter a valid MLS number of the listing you wish to update or import.", array('!mn' => '<b>'.$mlsnum.'</b>')), 'warning');
		return;
	}else{
		
		
		
		//loop listings returned form RAM 
		foreach ($listings as $mlsnum => $listing) {
			
			//quick check to see if a ramlisting node already exists with the listings MLS num as node title
			$row = db_query('SELECT nid FROM node WHERE title = :mlsnum', array(':mlsnum' => $mlsnum))->fetchField();
			
	
			if(!isset($row)) {
			//no existing ramlisting node with mls number as title SO do insert
	
					$createdlisting = ramlisting_create_new_listing($listing);
	
			} else {
			//we found an existing ramlisting node SO do update
					
					$nid = $row; ;
					$updatedlisting = ramlisting_update_listing($listing, $nid);
			}
			//log mls number of last property imported or updated
			$lastupdated_mlsnum = $listing['title'];
		}
	}
}

/**
 * creates a new ramlisting node an populates it with listing data.
 *
 * @param $listing
 *   Required. array of property data to insert into ramlisting node.
 * 
 */
function ramlisting_create_new_listing($listing){
	
	//kpr($listing); exit;
	
	include(RAMLISTING_CONFIG_PATH . '/aspen.config.inc');
	
	$listingnode = new stdClass();
  $listingnode->type = 'ramlisting';

  $listingnode->title    = $listing['title'];
  $listingnode->language = LANGUAGE_NONE;
  $listingnode->uid = 1; 
  $path = 'listing/'.$listing['title'];
  $listingnode->path = array('alias' => $path);
  node_object_prepare($listingnode);
  $fieldfilter = array('title','field_ramlisting_images');

  foreach ($listing as $fieldname => $fieldcontents) {
		if(!in_array($fieldname,$fieldfilter)){
		
		switch($fieldname){
			
		case 'field_ramlisting_beds':
			
			$bedroom_options = array(
					'Studio'=>0,
					'One' => 1,
					'Two' => 2,
					'Three' => 3,
					'Four' => 4,
					'Five' => 5,
					'Six' => 6,
					'Seven' =>7,
					'Eight' => 8,
					'Nine Or More' => 9,
					);
					
				
        $listingnode->{$fieldname}[$listingnode->language][0]['value'] = $bedroom_options[$fieldcontents['fieldvalue']];
        break;
    default:
        $listingnode->{$fieldname}[$listingnode->language][0]['value'] = $fieldcontents['fieldvalue'];
			
		}
			
		//$listingnode->{$fieldname}[$listingnode->language][0]['value'] = $fieldcontents['fieldvalue'];
		
		
		
		$listingnode->{$fieldname}[$listingnode->language][0]['format'] = $fieldcontents['fieldformat'];
		
		}
 	} 
  

 	if(array_key_exists('field_ramlisting_images',$listing)){
 		if($listing['field_ramlisting_images']  != ''){
 			
 			$listingnode->field_ramlisting_imagesavail[$listingnode->language][0]['value'] = $listing['field_ramlisting_images'];
 		
	 		$image_array = explode('-',$listing['field_ramlisting_images']);
	 		$ctr = 0;
	 		foreach ($image_array as $image) {

	 			if(strpos( $image, 'thumb') === FALSE){// we arent storing thumbs
	 				$image_stored = ramlisting_store_image($image);

		 			if(is_object($image_stored)){

						$image_stored->display = 1;
						$image_stored->description = "";
						      
						//$node->field_my_files['und'][0] = (array)$file;//the name of the field that requires the files
						$listingnode->field_ramlisting_images['und'][$ctr] = (array)$image_stored;										
		 				$ctr++;
	
		 			}
		 			
	 			}
	 		}
 		}
 	}

  // premptive stirke on creation of location data
  $locationsvalues = array();
  $locationsconfig = array(
  'field_ramlisting_address'=>'street', 
  'field_ramlisting_city'=>'city',
  'field_ramlisting_state'=> 'province',
  'field_ramlisting_zip'=> 'postal_code',
  'field_ramlisting_lat'=>'latitude',
 	'field_ramlisting_lon'=>'longitude', 
  );
  
  
  foreach ($locationsconfig as $listingfield => $locationfield) {
  	if(array_key_exists($listingfield, $listingnode)){
  		$locationsvalues[0][$locationfield] = $listing[$listingfield]['fieldvalue'];
  	}
  }
 
  // save the new listing node
  node_save($listingnode);
	
  //if the node saved then we can add location
  if($listingnode->nid){
  	$criteria = array(
			'nid' => $listingnode->nid,
			'vid' => $listingnode->vid,
			'genid' => 'ramlisting',
  	);
  	
  	location_save_locations( $locationsvalues , $criteria );
  	
  	return true;
  }else{
  	return false;
  }
  
}

function ramlisting_update_listing($listing, $nid){
	
	//step 1 load the listing node we are going to update
	$listingnode = node_load($nid);
	
	//throw current value for imagesavailable in to a str and an array for later use
	$currentimage_string = $listingnode->field_ramlisting_imagesavail[$listingnode->language][0]['value'];
	$currentimage_array = explode('-',$currentimage_string);
	
	//set an array of fields not to update in listing field loop below
	$fieldfilter = array('title','field_ramlisting_images');
	//and a few default flags
	$updateimages = FALSE;
	$doupdate = FALSE;
	 
	
	//loop through listing data fields
  foreach ($listing as $fieldname => $fieldcontents) {
  
		if(!in_array($fieldname,$fieldfilter)){ // filter title and images
			//find the current value in existing listingnode field
  	if($fieldname =='field_ramlisting_price'){
  		$priceval = number_format($fieldcontents['fieldvalue'],2,'.','');
  		$fieldcontents['fieldvalue'] = $priceval;
  		
  	}
			//need to check for existance field and its current value
			$curvalarray = $listingnode->{$fieldname};
			if(is_array($curvalarray) && (count($curvalarray) > 0)){
				$curval = $listingnode->{$fieldname}['und'][0]['value'];
			}else{
				$curval = '';	
			}
		
			//compare existing value to value from imported listing field	
			if($curval != $fieldcontents['fieldvalue']){

				//something changed so set a flag to proceed with update and add the updated listing field value to listingnode to save
				$doupdate = TRUE;			
		
				//look for change in the images available flag the process to deal with images
				$listingnode->{$fieldname}[$listingnode->language][0]['value'] = $fieldcontents['fieldvalue'];
			}
		}
 	}

	if(array_key_exists('field_ramlisting_images',$listing)){
		if($listing['field_ramlisting_images']  != ''){
		
			$importimagesavail = $listing['field_ramlisting_images'];
			$curimagesavail = $listingnode->field_ramlisting_imagesavail['und'][0]['value'];
			
		
			
			
			if($importimagesavail != $curimagesavail){  //ok something has changed in the available images fed to us fom RAM
			
				$doupdate = TRUE;
				
				$imageimport_array = explode('-',$importimagesavail);
				$imagecur_array = explode('-',$curimagesavail);
				
				//unset indices with 'thumb' in both import and currnet image arrays
				foreach ($imageimport_array as $k => $iimg) {
					if(strpos($iimg, 'thumb') !== false) {
						unset($imageimport_array[$k]);
					  $imageimport_array = array_values($imageimport_array);
					}
				}
				
				foreach ($imagecur_array as $k => $cimg) {
					if(strpos( $cimg, 'thumb') !== false) {
						unset($imagecur_array[$k]);
					  $imagecur_array = array_values($imagecur_array);
					}
				}
				

				
				$ctr = 0;
				// Loop through the update image array
				foreach ($imageimport_array as $image) {

					
						
						
						if($image != $imagecur_array[$ctr]){  // if the images in matching indices in both arrays == then do nuthin
							//figure out if image already exists
							//	kpr($image);
						//kpr($imagecur_array[$ctr]);
							$image_existing = ramlisting_find_image($image);
							
							//kpr($image_existing);
							
							
							if(is_object($image_existing)){ //existing image so use it
									$image_existing->display = 1;
									$image_existing->description = "";
									$listingnode->field_ramlisting_images['und'][$ctr] = (array)$image_existing;
								
							}else{ // new image so upload and store
								$image_stored = ramlisting_store_image($image);
								if(is_object($image_stored)){
									$image_stored->display = 1;
									$image_stored->description = "";
									$listingnode->field_ramlisting_images['und'][$ctr] = (array)$image_stored;
								}
							}	
						}										
						$ctr++;
			
				}
			}
		}
	}
		
//kpr($listingnode); exit;

 	
 	  // save the new listing node
 	if($doupdate){
  node_save($listingnode);
   		drupal_set_message(t("The MLS listing !mn was updated", array('!mn' => '<b>'.$listingnode->title.'</b>')), 'notice');
 	}else{
 		drupal_set_message(t("The MLS listing !mn was flagged to update but the no data had changed so update was note invoked", array('!mn' => '<b>'.$listingnode->title.'</b>')), 'notice');
 	}
 	
}

function ramlisting_store_image($image) {
 
 
  	$imagebase = variable_get('ramlisting_imagebase', NULL);
    $imageURL = $imagebase.$image;


    $imagetoupload = file_get_contents($imageURL); // string
    // Subdirectory name within files directory. 
    $dest = file_default_scheme() . '://ramlisting/images/'.$image; 
    
		$uploadedimage = file_save_data($imagetoupload, $dest, FILE_EXISTS_REPLACE);
		//$uploadedimage = file_unmanaged_save_data($imagetoupload, 'public://'.$image, FILE_EXISTS_REPLACE);

    return $uploadedimage;
}


function ramlisting_find_image($image) {
 
 		$uri = 'public://ramlisting/images/'.$image;
 		if (file_exists($uri)) {
 			//$file->filepath = drupal_realpath($file->uri);
  		$existingmanagedimage = file_get_contents($uri);
  		$newmanagedimage = file_save_data($existingmanagedimage, $uri, FILE_EXISTS_REPLACE);
  		kpr($newmanagedimage);
  		return $newmanagedimage;
		}else{
			return false;
		}
 		
 		

}



function ramlisting_geo_code (&$node, &$csv) {

    $locationString = $csv['Address'] . ',' . $csv['City'] . ',' . $csv['State'] . ',' . $csv['Zip'];

    // Apply the location, only going to do this if the location string
    // has changed
    //$data  = urlencode( "100 Beaver Creek Blvd Avon, CO 81620" );
    //$url   = 'http://maps.google.com/maps/geo?output=xml&key='. 'AIzaSyD-iALb603itH3eNCcD6SkSMqEPEmXUweg' .'&q=' .$data;
    //$reply = drupal_http_request( $url );
    //print_r( $reply );
    //exit;

    /*
      Compare are node's location with address string. If it's the same
      skip setting the location
    */
    $loc = $node->location;
    $nodeString = $loc['street'] . ',' . $loc['city'] . ',' . $loc['province'] . ',' . $loc['postal_code'];

    if ($locationString == $nodeString) {
      //echo "skip node location $node->nid\n";
      return;
    }

    $defaultCountry = 'us';
    /*
      Would we really translate things like country code?  Or even addresses,
      cities, states?
    */
    $locations = array (
      array (
        'street'      => $csv['Address'], // Address
        'additional'  => '',
        'city'        => $csv['City'], // City
        'province'    => location_province_code($defaultCountry, $csv['State']), // State
        'postal_code' => $csv['Zip'],  // Zip
        'country'     => $defaultCountry,
        'latitude'    => '',
        'longitude'   => '',
        'phone'       => $csv['Office_Phone'],  // Office_Phone?
        'fax'         => ''
      )
    );
    $node->locations = $locations;
}


/**
 *
 */
function ramlisting_purge_all() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'ramlisting'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  //kpr($nids);
  if(count($nids)){
  node_delete_multiple($nids);
  }

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
 	$current_config_files = variable_get('ramlisting_config_files', NULL);
  
	$feed_path = RAMLISTING_CONFIG_PATH.'/'.$current_config_files;
	include($feed_path);
    //kpr($custom_fields);
  foreach (array_keys($custom_fields) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the ramlisting
  // content type and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'ramlisting');
   // kpr($instances);
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }



  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
  	$options = array('fragment' => 'overlay=admin/config/content/ramlisting/tools');
	 drupal_goto('admin/config/content/ramlisting/tools', $options);
}